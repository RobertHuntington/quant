{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tables in /usr/local/lib/python3.6/site-packages (3.5.1)\n",
      "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/site-packages (from tables) (1.11.0)\n",
      "Requirement already satisfied: numpy>=1.9.3 in /usr/local/lib/python3.6/site-packages (from tables) (1.15.4)\n",
      "Requirement already satisfied: numexpr>=2.6.2 in /usr/local/lib/python3.6/site-packages (from tables) (2.6.9)\n",
      "Requirement already satisfied: mock>=2.0 in /usr/local/lib/python3.6/site-packages (from tables) (2.0.0)\n",
      "Requirement already satisfied: pbr>=0.11 in /usr/local/lib/python3.6/site-packages (from mock>=2.0->tables) (5.1.3)\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install tables\n",
    "\n",
    "import os\n",
    "from populator import aggregate_data\n",
    "\n",
    "data_dir = 'data'\n",
    "exchange = 'test'\n",
    "write_csv = False\n",
    "write_hdf = True\n",
    "# Intervals other than '1min' over which to downsample data and store on disk\n",
    "downsampling_intervals = ['5min', '15min', '1h', '1d']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found following pairs for exchange test: ['.DS_Store', 'NEO/USDT', 'ETC/USDT', 'BCH/USDT', 'EOS/USDT']\n"
     ]
    }
   ],
   "source": [
    "pairs = []\n",
    "for filename in os.listdir(os.path.join(data_dir, exchange)):\n",
    "    currencies = filename.split('-')[:2]\n",
    "    pairs.append('/'.join(currencies))\n",
    "print('Found following pairs for exchange {}: {}'.format(exchange, pairs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Data for .DS_Store on test does not exist.\n",
      "Loaded pair NEO/USDT on test (2017-11-20 03:42:00 to 2019-03-14 00:17:00)\n",
      "Loaded pair ETC/USDT on test (2018-06-12 02:30:00 to 2019-03-14 00:17:00)\n",
      "Loaded pair BCH/USDT on test (2018-11-16 08:00:00 to 2019-03-14 00:17:00)\n",
      "Loaded pair EOS/USDT on test (2018-05-28 05:00:00 to 2019-03-14 00:17:00)\n",
      "Assembled aggregate dataframe\n"
     ]
    }
   ],
   "source": [
    "df_1m = aggregate_data('data', {exchange: pairs}, '1m', '2000-01-01T00:00:00Z')\n",
    "print('Assembled aggregate dataframe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open_test_NEO_USDT</th>\n",
       "      <th>high_test_NEO_USDT</th>\n",
       "      <th>low_test_NEO_USDT</th>\n",
       "      <th>close_test_NEO_USDT</th>\n",
       "      <th>volume_test_NEO_USDT</th>\n",
       "      <th>open_test_ETC_USDT</th>\n",
       "      <th>high_test_ETC_USDT</th>\n",
       "      <th>low_test_ETC_USDT</th>\n",
       "      <th>close_test_ETC_USDT</th>\n",
       "      <th>volume_test_ETC_USDT</th>\n",
       "      <th>open_test_BCH_USDT</th>\n",
       "      <th>high_test_BCH_USDT</th>\n",
       "      <th>low_test_BCH_USDT</th>\n",
       "      <th>close_test_BCH_USDT</th>\n",
       "      <th>volume_test_BCH_USDT</th>\n",
       "      <th>open_test_EOS_USDT</th>\n",
       "      <th>high_test_EOS_USDT</th>\n",
       "      <th>low_test_EOS_USDT</th>\n",
       "      <th>close_test_EOS_USDT</th>\n",
       "      <th>volume_test_EOS_USDT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-11-20 03:42:00</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>1.14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-20 03:43:00</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-20 03:44:00</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-20 03:45:00</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-20 03:46:00</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     open_test_NEO_USDT  high_test_NEO_USDT  \\\n",
       "timestamp                                                     \n",
       "2017-11-20 03:42:00                36.0                36.0   \n",
       "2017-11-20 03:43:00                36.0                36.0   \n",
       "2017-11-20 03:44:00                36.0                36.0   \n",
       "2017-11-20 03:45:00                36.0                36.0   \n",
       "2017-11-20 03:46:00                36.0                36.0   \n",
       "\n",
       "                     low_test_NEO_USDT  close_test_NEO_USDT  \\\n",
       "timestamp                                                     \n",
       "2017-11-20 03:42:00               36.0                 36.0   \n",
       "2017-11-20 03:43:00               36.0                 36.0   \n",
       "2017-11-20 03:44:00               36.0                 36.0   \n",
       "2017-11-20 03:45:00               36.0                 36.0   \n",
       "2017-11-20 03:46:00               36.0                 36.0   \n",
       "\n",
       "                     volume_test_NEO_USDT  open_test_ETC_USDT  \\\n",
       "timestamp                                                       \n",
       "2017-11-20 03:42:00                  1.14                 NaN   \n",
       "2017-11-20 03:43:00                  0.00                 NaN   \n",
       "2017-11-20 03:44:00                  0.00                 NaN   \n",
       "2017-11-20 03:45:00                  0.00                 NaN   \n",
       "2017-11-20 03:46:00                  0.00                 NaN   \n",
       "\n",
       "                     high_test_ETC_USDT  low_test_ETC_USDT  \\\n",
       "timestamp                                                    \n",
       "2017-11-20 03:42:00                 NaN                NaN   \n",
       "2017-11-20 03:43:00                 NaN                NaN   \n",
       "2017-11-20 03:44:00                 NaN                NaN   \n",
       "2017-11-20 03:45:00                 NaN                NaN   \n",
       "2017-11-20 03:46:00                 NaN                NaN   \n",
       "\n",
       "                     close_test_ETC_USDT  volume_test_ETC_USDT  \\\n",
       "timestamp                                                        \n",
       "2017-11-20 03:42:00                  NaN                   NaN   \n",
       "2017-11-20 03:43:00                  NaN                   NaN   \n",
       "2017-11-20 03:44:00                  NaN                   NaN   \n",
       "2017-11-20 03:45:00                  NaN                   NaN   \n",
       "2017-11-20 03:46:00                  NaN                   NaN   \n",
       "\n",
       "                     open_test_BCH_USDT  high_test_BCH_USDT  \\\n",
       "timestamp                                                     \n",
       "2017-11-20 03:42:00                 NaN                 NaN   \n",
       "2017-11-20 03:43:00                 NaN                 NaN   \n",
       "2017-11-20 03:44:00                 NaN                 NaN   \n",
       "2017-11-20 03:45:00                 NaN                 NaN   \n",
       "2017-11-20 03:46:00                 NaN                 NaN   \n",
       "\n",
       "                     low_test_BCH_USDT  close_test_BCH_USDT  \\\n",
       "timestamp                                                     \n",
       "2017-11-20 03:42:00                NaN                  NaN   \n",
       "2017-11-20 03:43:00                NaN                  NaN   \n",
       "2017-11-20 03:44:00                NaN                  NaN   \n",
       "2017-11-20 03:45:00                NaN                  NaN   \n",
       "2017-11-20 03:46:00                NaN                  NaN   \n",
       "\n",
       "                     volume_test_BCH_USDT  open_test_EOS_USDT  \\\n",
       "timestamp                                                       \n",
       "2017-11-20 03:42:00                   NaN                 NaN   \n",
       "2017-11-20 03:43:00                   NaN                 NaN   \n",
       "2017-11-20 03:44:00                   NaN                 NaN   \n",
       "2017-11-20 03:45:00                   NaN                 NaN   \n",
       "2017-11-20 03:46:00                   NaN                 NaN   \n",
       "\n",
       "                     high_test_EOS_USDT  low_test_EOS_USDT  \\\n",
       "timestamp                                                    \n",
       "2017-11-20 03:42:00                 NaN                NaN   \n",
       "2017-11-20 03:43:00                 NaN                NaN   \n",
       "2017-11-20 03:44:00                 NaN                NaN   \n",
       "2017-11-20 03:45:00                 NaN                NaN   \n",
       "2017-11-20 03:46:00                 NaN                NaN   \n",
       "\n",
       "                     close_test_EOS_USDT  volume_test_EOS_USDT  \n",
       "timestamp                                                       \n",
       "2017-11-20 03:42:00                  NaN                   NaN  \n",
       "2017-11-20 03:43:00                  NaN                   NaN  \n",
       "2017-11-20 03:44:00                  NaN                   NaN  \n",
       "2017-11-20 03:45:00                  NaN                   NaN  \n",
       "2017-11-20 03:46:00                  NaN                   NaN  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1m.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def downsample(df, interval):\n",
    "    # Sum over all volumes and average over all prices in each interval\n",
    "    agg_fns = {col: np.sum if col.startswith('volume') else np.mean for col in df}\n",
    "    return df.resample(interval).agg(agg_fns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downsampling test data to 5min... Done\n",
      "Downsampling test data to 15min... Done\n",
      "Downsampling test data to 1h... Done\n",
      "Downsampling test data to 1d... Done\n"
     ]
    }
   ],
   "source": [
    "dfs = [(df_1m, '1min')]\n",
    "for interval in downsampling_intervals:\n",
    "    print('Downsampling {} data to {}... '.format(exchange, interval), end='')\n",
    "    df_down = downsample(df_1m, interval)\n",
    "    print('Done')\n",
    "    dfs.append((df_down, interval))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote data/test/all-1min.h5\n",
      "Wrote data/test/all-5min.h5\n",
      "Wrote data/test/all-15min.h5\n",
      "Wrote data/test/all-1h.h5\n",
      "Wrote data/test/all-1d.h5\n"
     ]
    }
   ],
   "source": [
    "for df, interval in dfs:\n",
    "    path_prefix = os.path.join(data_dir, exchange, 'all-' + interval)\n",
    "    if write_csv:\n",
    "        df.to_csv(path_prefix + '.csv', index_label='timestamp')\n",
    "        print('Wrote {}'.format(path_prefix + '.csv'))\n",
    "    if write_hdf:\n",
    "        df.to_hdf(path_prefix + '.h5', key = exchange + '_' + interval, mode='w')\n",
    "        print('Wrote {}'.format(path_prefix + '.h5'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
